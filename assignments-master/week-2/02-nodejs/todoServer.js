/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const path = require('path')
  
  const app = express();

  const FILE_PATH = path.join(__dirname, './todos.json');
  
  // app.listen(3000, () => {
  //   console.log('Server is running on port 3000');
  // });
  app.use(bodyParser.json());

  // POST Method
  app.post('/todos', (req, res) => {
    const todos = req.body;
    const todosId = Math.floor(Math.random() * 1000);
    todos.id = todosId;

    // console.log(todosId);
    // console.log(todo);
    // console.log(typeof todo);

    fs.readFile('todos.json', 'utf-8', (err, data ) => {
      if (err) {
        res.status(404).send("File not found");
      }
      const todosList = JSON.parse(data);
      todosList.push(todos);
      fs.writeFile('todos.json', JSON.stringify(todosList), (err) => {
        if (err) {
          console.log(err);
          res.status(500).send("Error writing to file");
        }
        res.status(201).json(todos);
      });
    });
  })
  
  module.exports = app;

  // GET Method
  
  app.get('/todos', (req, res) => {
    fs.readFile("todos.json", "utf8", function(err, data) {
      if (err) throw err;
      res.json(JSON.parse(data));
    });
  });


  // GET/:id
  app.get('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id);
    fs.readFile(FILE_PATH, 'utf-8', (err, data) => {
      if (err) {
        res.status(404).send("File not found");
      }
      const todosList = JSON.parse(data);
      // console.log(typeof id);
      // console.log(typeof todosList[0].id);
      const todo = todosList.filter(todo => todo.id === id);
      if(todo.length === 0) {
        res.status(404).send("Todo not found");
      }
      else{
        // console.log(todo);
        // console.log(todo.id);
        res.status(200).json(todo[0]);
      }
    })
  })

  // PUT/:id
  app.put('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id);

    fs.readFile(FILE_PATH, 'utf-8', (err, data) => {
      if (err) {
        res.status(404).send("File not found");
      }
      const todosList = JSON.parse(data);
      // console.log(typeof id);
      // console.log(typeof todosList[0].id);
      for(let i=0; i<todosList.length; i++) {
        if(todosList[i].id === id) {
          todosList[i].completed = true;
          break;
        }
      }
      fs.writeFile(FILE_PATH, JSON.stringify(todosList), (err) => {
        if (err) {
          res.status(404).send("File not found");
        }
      })
      
    })

    res.status(200).send("Done !");

  });

  //DELETE/:id
  app.delete('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id);
    fs.readFile(FILE_PATH, 'utf-8', (err, data) => {
      if (err) {
        res.status(404).send("File not found");
      }
      const todosList = JSON.parse(data);

      const todo = todosList.filter(todo => todo.id === id);
      if(todo.length == 0) {
        res.status(404).send("Todo not found");
      }
      // console.log(typeof id);
      // console.log(typeof todosList[0].id);
      for(let i=0; i<todosList.length; i++){
        if(todosList[i].id === id) {
          todosList.splice(i, 1);
          break;
        }
      }

      // console.log(todosList);

      fs.writeFile(FILE_PATH, JSON.stringify(todosList), (err) => {
        if (err) {
          res.status(404).send("Cannot write to the file");
        }
      })

      res.status(200).send("Delete the item")
    })
  })
